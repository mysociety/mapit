# -*- coding: utf-8 -*-
# Generated by Django 1.11.8 on 2018-01-11 12:52
from __future__ import unicode_literals

from django.db import migrations
from django.contrib.gis.db.models import Union


def move_ids_forward(apps, schema_editor):
    Geometry = apps.get_model('mapit', 'Geometry')
    for g in Geometry.objects.all().iterator():
        g.areas.add(g.area)


def move_ids_backward(apps, schema_editor):
    Area = apps.get_model('mapit', 'Area')
    Geometry = apps.get_model('mapit', 'Geometry')
    # Going backwards, we're moving from the situation where a
    # geometry can be in multiple areas, to only being in a single
    # area.  Please note that this isn't guaranteed to recreate
    # exactly the same areas and geometries after going forwards
    # and backwards through this migration, but for most purposes
    # it'll be functionally the same.
    for a in Area.objects.all().iterator():
        # Find any Geometry where area was set to this area, and
        # set its area to NULL.  This won't be necessary if you've
        # just migrated backwards through 0007, but there might be
        # some if you've just migrated forward to 0006:
        a.polygons_old.clear()
	# Do a union of any matching polygons to simplify the number of
	# polygons used, and so we can duplicate any geometries that are shared
        unioned = a.polygons.aggregate(Union('polygon'))['polygon__union']
        if unioned.geom_type == 'Polygon':
            unioned = [unioned]
        for polygon in unioned:
            a.polygons_old.create(polygon=polygon)
    # Now remove any geometries that have area_id set to NULL -
    # these will be those only associated with areas via the old
    # join table.
    Geometry.objects.filter(area=None).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('mapit', '0005_add_areas_m2m'),
    ]

    operations = [
        migrations.RunPython(move_ids_forward, move_ids_backward),
    ]
